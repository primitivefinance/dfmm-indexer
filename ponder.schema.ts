import { createSchema } from "@ponder/core";

export default createSchema((p) => ({
  SLPool: p.createTable({
    id: p.bigint(),
    tokenIndexId: p.hex().references("TokenIndex.id"),
    tokenIndex: p.one("tokenIndexId"),
    strategyId: p.hex().references("SLStrategy.id"),
    strategy: p.one("strategyId"),
    accountId: p.hex().references("Account.id"),
    account: p.one("accountId"),
    timestamp: p.bigint(),
    reservesWad: p.bigint().list(),
    reserves: p.float().list(),
    weightsWad: p.bigint().list(),
    weights: p.float().list(),
    liquidityWad: p.bigint(),
    liquidity: p.float(),
    lpToken: p.hex(),
    name: p.string(),
    parametersId: p.bigint().references("SLParameters.id"),
    parameters: p.one("parametersId"),
    positions: p.many("SLPosition.poolId"),
  }),
  WRPool: p.createTable({
    id: p.bigint(),
    tokenXId: p.hex().references("Token.id"),
    tokenX: p.one("tokenXId"),
    tokenYId: p.hex().references("Token.id"),
    tokenY: p.one("tokenYId"),
    strategyId: p.hex().references("WRStrategy.id"),
    strategy: p.one("strategyId"),
    accountId: p.hex().references("Account.id"),
    account: p.one("accountId"),
    timestamp: p.bigint(),
    reservesXWad: p.bigint(),
    reservesX: p.float(),
    reservesYWad: p.bigint(),
    reservesY: p.float(),
    liquidityWad: p.bigint(),
    liquidity: p.float(),
    lpToken: p.hex(),
    name: p.string(),
    parametersId: p.bigint().references("WRParameters.id"),
    parameters: p.one("parametersId"),
    positions: p.many("WRPosition.poolId"),
  }),
  Token: p.createTable({
    id: p.hex(),
    name: p.string(),
    symbol: p.string(),
    decimals: p.int(),
  }),
  TokenIndex: p.createTable({
    id: p.hex(),
    names: p.string().list(),
    symbol: p.string().list(),
    decimals: p.int().list(),
  }),
  Account: p.createTable({
    id: p.hex(),
    slPositions: p.many("SLPosition.accountId"),
    wrPositions: p.many("WRPosition.accountId"),
    swapPoints: p.bigint(),
    wrPoints: p.bigint(),
    slPoints: p.bigint(),
    pointsTotal: p.bigint(),
  }),
  Period: p.createTable({
    id: p.bigint(),
    start: p.int(),
    end: p.int(),
    current: p.boolean(),
  }),
  SLPosition: p.createTable({
    id: p.hex(),
    liquidity: p.float(),
    liquidityWad: p.bigint(),
    accountId: p.hex().references("Account.id"),
    account: p.one("accountId"),
    poolId: p.bigint().references("SLPool.id"),
    pool: p.one("poolId"),
  }),
  WRPosition: p.createTable({
    id: p.hex(),
    liquidity: p.float(),
    liquidityWad: p.bigint(),
    accountId: p.hex().references("Account.id"),
    account: p.one("accountId"),
    poolId: p.bigint().references("WRPool.id"),
    pool: p.one("poolId"),
  }),
  SLParameters: p.createTable({
    id: p.bigint(),
    swapFee: p.float(),
    swapFeeWad: p.bigint(),
    weightX: p.float(),
    weightXWad: p.bigint(),
    weights: p.float().list(),
    weightsWad: p.bigint().list(),
    controller: p.hex(),
  }),
  WRParameters: p.createTable({
    id: p.bigint(),
    price: p.bigint(),
    swapFee: p.float(),
    swapFeeWad: p.bigint(),
    controller: p.hex(),
  }),
  SLStrategy: p.createTable({
    id: p.hex(),
    name: p.string(),
    pools: p.many("SLPool.strategyId"),
  }),
  WRStrategy: p.createTable({
    id: p.hex(),
    name: p.string(),
    pools: p.many("WRPool.strategyId"),
  }),
}));